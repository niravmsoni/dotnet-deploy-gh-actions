name: Build and Deploy ðŸš€

on:
  # For allowing manually running the pipeline from GH interface
  workflow_dispatch:
  # For auto-triggering when changes pushed to main branch
  push:
    branches:
    - main

# Setup environment variables
env:
  DOTNET_VERSION: 8.0.x

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      # Checkout code
      - uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{env.DOTNET_VERSION}}

      - name: Dotnet Restore
        run: dotnet restore ./Starter/Starter.sln

      - name: Scan for vulnerable packages
        run: dotnet list package --vulnerable --include-transitive --project ./Starter/Starter.WebAPI/Starter.WebAPI.csproj

      - name: Dotnet List Vulnerable packages
        id: scan
        run: |
            result=$(dotnet list package --vulnerable --include-transitive --project ./Starter/Starter.WebAPI/Starter.WebAPI.csproj)
            echo "$result"
            if echo "$result" | grep -q "No vulnerable packages found"; then
              echo "No vulnerabilities found"
            else
              echo "Vulnerabilities found"
              exit 1
            fi

      # Specifying no-restore flag since we're already restoring in earlier.
      - name: Dotnet Build
        run: dotnet build ./Starter/Starter.sln --configuration Release --no-restore

      # Specifying no-restore and no-build to speed up the process
      - name: Dotnet Test
        run: dotnet test ./Starter/Starter.sln --configuration Release --no-restore --no-build --collect:"XPlat Code Coverage" --logger trx --results-directory coverage

      - name: Code Coverage Summary Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
           filename: 'coverage/*/coverage.cobertura.xml'
           badge: true
           format: 'markdown'
           output: 'both'

      - name: Publish Code Coverage
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY
    